// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: service_stocks.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StocksClient is the client API for Stocks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StocksClient interface {
	GetTicker(ctx context.Context, in *GetTickerRequest, opts ...grpc.CallOption) (*GetTickerResponse, error)
}

type stocksClient struct {
	cc grpc.ClientConnInterface
}

func NewStocksClient(cc grpc.ClientConnInterface) StocksClient {
	return &stocksClient{cc}
}

func (c *stocksClient) GetTicker(ctx context.Context, in *GetTickerRequest, opts ...grpc.CallOption) (*GetTickerResponse, error) {
	out := new(GetTickerResponse)
	err := c.cc.Invoke(ctx, "/pb.Stocks/GetTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StocksServer is the server API for Stocks service.
// All implementations must embed UnimplementedStocksServer
// for forward compatibility
type StocksServer interface {
	GetTicker(context.Context, *GetTickerRequest) (*GetTickerResponse, error)
	mustEmbedUnimplementedStocksServer()
}

// UnimplementedStocksServer must be embedded to have forward compatible implementations.
type UnimplementedStocksServer struct {
}

func (UnimplementedStocksServer) GetTicker(context.Context, *GetTickerRequest) (*GetTickerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicker not implemented")
}
func (UnimplementedStocksServer) mustEmbedUnimplementedStocksServer() {}

// UnsafeStocksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StocksServer will
// result in compilation errors.
type UnsafeStocksServer interface {
	mustEmbedUnimplementedStocksServer()
}

func RegisterStocksServer(s grpc.ServiceRegistrar, srv StocksServer) {
	s.RegisterService(&Stocks_ServiceDesc, srv)
}

func _Stocks_GetTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StocksServer).GetTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Stocks/GetTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StocksServer).GetTicker(ctx, req.(*GetTickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stocks_ServiceDesc is the grpc.ServiceDesc for Stocks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stocks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Stocks",
	HandlerType: (*StocksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTicker",
			Handler:    _Stocks_GetTicker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_stocks.proto",
}
